// Automatically generated by MockGen. DO NOT EDIT!
// Source: new_cgroup.go

package cgroup

import (
	gomock "github.com/golang/mock/gomock"
	cgroups "github.com/opencontainers/runc/libcontainer/cgroups"
	configs "github.com/opencontainers/runc/libcontainer/configs"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) Apply(pid int) error {
	ret := _m.ctrl.Call(_m, "Apply", pid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Apply(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Apply", arg0)
}

func (_m *MockManager) GetPids() ([]int, error) {
	ret := _m.ctrl.Call(_m, "GetPids")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetPids() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPids")
}

func (_m *MockManager) GetAllPids() ([]int, error) {
	ret := _m.ctrl.Call(_m, "GetAllPids")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetAllPids() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllPids")
}

func (_m *MockManager) GetStats() (*cgroups.Stats, error) {
	ret := _m.ctrl.Call(_m, "GetStats")
	ret0, _ := ret[0].(*cgroups.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetStats() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStats")
}

func (_m *MockManager) Freeze(state configs.FreezerState) error {
	ret := _m.ctrl.Call(_m, "Freeze", state)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Freeze(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Freeze", arg0)
}

func (_m *MockManager) Destroy() error {
	ret := _m.ctrl.Call(_m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Destroy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy")
}

func (_m *MockManager) Path(_param0 string) string {
	ret := _m.ctrl.Call(_m, "Path", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockManagerRecorder) Path(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Path", arg0)
}

func (_m *MockManager) Set(r *configs.Resources) error {
	ret := _m.ctrl.Call(_m, "Set", r)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Set(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0)
}

func (_m *MockManager) GetPaths() map[string]string {
	ret := _m.ctrl.Call(_m, "GetPaths")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

func (_mr *_MockManagerRecorder) GetPaths() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPaths")
}

func (_m *MockManager) GetCgroups() (*configs.Cgroup, error) {
	ret := _m.ctrl.Call(_m, "GetCgroups")
	ret0, _ := ret[0].(*configs.Cgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetCgroups() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCgroups")
}

func (_m *MockManager) GetFreezerState() (configs.FreezerState, error) {
	ret := _m.ctrl.Call(_m, "GetFreezerState")
	ret0, _ := ret[0].(configs.FreezerState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) GetFreezerState() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFreezerState")
}

func (_m *MockManager) Exists() bool {
	ret := _m.ctrl.Call(_m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockManagerRecorder) Exists() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists")
}

func (_m *MockManager) OOMKillCount() (uint64, error) {
	ret := _m.ctrl.Call(_m, "OOMKillCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) OOMKillCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OOMKillCount")
}
