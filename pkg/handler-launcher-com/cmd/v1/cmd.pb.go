// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/handler-launcher-com/cmd/v1/cmd.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:

	pkg/handler-launcher-com/cmd/v1/cmd.proto

It has these top-level messages:

	QemuVersionResponse
	VMI
	CPU
	Sibling
	Pages
	Memory
	Cell
	Topology
	SMBios
	DiskInfo
	ClusterConfig
	VirtualMachineOptions
	VMIRequest
	MigrationRequest
	ExecRequest
	EmptyRequest
	Response
	DomainResponse
	DomainStatsResponse
	GuestInfoResponse
	GuestUserListResponse
	GuestFilesystemsResponse
	ExecResponse
	GuestPingRequest
	GuestPingResponse
	FreezeRequest
	MemoryDumpRequest
	SEVInfoResponse
	LaunchMeasurementResponse
	InjectLaunchSecretRequest
	DirtyRateResponse
	GuestStatsResponse
*/
package v1

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QemuVersionResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Version  string    `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *QemuVersionResponse) Reset()                    { *m = QemuVersionResponse{} }
func (m *QemuVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*QemuVersionResponse) ProtoMessage()               {}
func (*QemuVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QemuVersionResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *QemuVersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type VMI struct {
	VmiJson []byte `protobuf:"bytes,1,opt,name=vmiJson,proto3" json:"vmiJson,omitempty"`
}

func (m *VMI) Reset()                    { *m = VMI{} }
func (m *VMI) String() string            { return proto.CompactTextString(m) }
func (*VMI) ProtoMessage()               {}
func (*VMI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VMI) GetVmiJson() []byte {
	if m != nil {
		return m.VmiJson
	}
	return nil
}

type CPU struct {
	Id       uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Siblings []uint32 `protobuf:"varint,2,rep,packed,name=siblings" json:"siblings,omitempty"`
}

func (m *CPU) Reset()                    { *m = CPU{} }
func (m *CPU) String() string            { return proto.CompactTextString(m) }
func (*CPU) ProtoMessage()               {}
func (*CPU) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CPU) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CPU) GetSiblings() []uint32 {
	if m != nil {
		return m.Siblings
	}
	return nil
}

type Sibling struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Sibling) Reset()                    { *m = Sibling{} }
func (m *Sibling) String() string            { return proto.CompactTextString(m) }
func (*Sibling) ProtoMessage()               {}
func (*Sibling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Sibling) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sibling) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Pages struct {
	Count uint64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Unit  string `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *Pages) Reset()                    { *m = Pages{} }
func (m *Pages) String() string            { return proto.CompactTextString(m) }
func (*Pages) ProtoMessage()               {}
func (*Pages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Pages) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Pages) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Pages) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Memory struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Unit   string `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
}

func (m *Memory) Reset()                    { *m = Memory{} }
func (m *Memory) String() string            { return proto.CompactTextString(m) }
func (*Memory) ProtoMessage()               {}
func (*Memory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Memory) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Memory) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type Cell struct {
	Id        uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Memory    *Memory    `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Pages     []*Pages   `protobuf:"bytes,3,rep,name=pages" json:"pages,omitempty"`
	Distances []*Sibling `protobuf:"bytes,4,rep,name=distances" json:"distances,omitempty"`
	Cpus      []*CPU     `protobuf:"bytes,5,rep,name=cpus" json:"cpus,omitempty"`
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Cell) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cell) GetMemory() *Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *Cell) GetPages() []*Pages {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *Cell) GetDistances() []*Sibling {
	if m != nil {
		return m.Distances
	}
	return nil
}

func (m *Cell) GetCpus() []*CPU {
	if m != nil {
		return m.Cpus
	}
	return nil
}

type Topology struct {
	NumaCells []*Cell `protobuf:"bytes,1,rep,name=numa_cells,json=numaCells" json:"numa_cells,omitempty"`
}

func (m *Topology) Reset()                    { *m = Topology{} }
func (m *Topology) String() string            { return proto.CompactTextString(m) }
func (*Topology) ProtoMessage()               {}
func (*Topology) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Topology) GetNumaCells() []*Cell {
	if m != nil {
		return m.NumaCells
	}
	return nil
}

type SMBios struct {
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Product      string `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
	Version      string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Sku          string `protobuf:"bytes,4,opt,name=sku" json:"sku,omitempty"`
	Family       string `protobuf:"bytes,5,opt,name=family" json:"family,omitempty"`
}

func (m *SMBios) Reset()                    { *m = SMBios{} }
func (m *SMBios) String() string            { return proto.CompactTextString(m) }
func (*SMBios) ProtoMessage()               {}
func (*SMBios) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SMBios) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *SMBios) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *SMBios) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SMBios) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *SMBios) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type DiskInfo struct {
	Format      string `protobuf:"bytes,1,opt,name=format" json:"format,omitempty"`
	BackingFile string `protobuf:"bytes,2,opt,name=backingFile" json:"backingFile,omitempty"`
	ActualSize  uint64 `protobuf:"varint,3,opt,name=actualSize" json:"actualSize,omitempty"`
	VirtualSize uint64 `protobuf:"varint,4,opt,name=virtualSize" json:"virtualSize,omitempty"`
}

func (m *DiskInfo) Reset()                    { *m = DiskInfo{} }
func (m *DiskInfo) String() string            { return proto.CompactTextString(m) }
func (*DiskInfo) ProtoMessage()               {}
func (*DiskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DiskInfo) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *DiskInfo) GetBackingFile() string {
	if m != nil {
		return m.BackingFile
	}
	return ""
}

func (m *DiskInfo) GetActualSize() uint64 {
	if m != nil {
		return m.ActualSize
	}
	return 0
}

func (m *DiskInfo) GetVirtualSize() uint64 {
	if m != nil {
		return m.VirtualSize
	}
	return 0
}

type ClusterConfig struct {
	ExpandDisksEnabled        bool `protobuf:"varint,1,opt,name=ExpandDisksEnabled" json:"ExpandDisksEnabled,omitempty"`
	FreePageReportingDisabled bool `protobuf:"varint,2,opt,name=FreePageReportingDisabled" json:"FreePageReportingDisabled,omitempty"`
	BochsDisplayForEFIGuests  bool `protobuf:"varint,3,opt,name=BochsDisplayForEFIGuests" json:"BochsDisplayForEFIGuests,omitempty"`
}

func (m *ClusterConfig) Reset()                    { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string            { return proto.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()               {}
func (*ClusterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ClusterConfig) GetExpandDisksEnabled() bool {
	if m != nil {
		return m.ExpandDisksEnabled
	}
	return false
}

func (m *ClusterConfig) GetFreePageReportingDisabled() bool {
	if m != nil {
		return m.FreePageReportingDisabled
	}
	return false
}

func (m *ClusterConfig) GetBochsDisplayForEFIGuests() bool {
	if m != nil {
		return m.BochsDisplayForEFIGuests
	}
	return false
}

type VirtualMachineOptions struct {
	VirtualMachineSMBios  *SMBios              `protobuf:"bytes,1,opt,name=VirtualMachineSMBios" json:"VirtualMachineSMBios,omitempty"`
	MemBalloonStatsPeriod uint32               `protobuf:"varint,2,opt,name=MemBalloonStatsPeriod" json:"MemBalloonStatsPeriod,omitempty"`
	PreallocatedVolumes   []string             `protobuf:"bytes,3,rep,name=PreallocatedVolumes" json:"PreallocatedVolumes,omitempty"`
	Topology              *Topology            `protobuf:"bytes,4,opt,name=topology" json:"topology,omitempty"`
	DisksInfo             map[string]*DiskInfo `protobuf:"bytes,5,rep,name=DisksInfo" json:"DisksInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deprecated, use clusterConfig.ExpandDisksEnabled
	ExpandDisksEnabled bool           `protobuf:"varint,6,opt,name=ExpandDisksEnabled" json:"ExpandDisksEnabled,omitempty"`
	ClusterConfig      *ClusterConfig `protobuf:"bytes,7,opt,name=clusterConfig" json:"clusterConfig,omitempty"`
}

func (m *VirtualMachineOptions) Reset()                    { *m = VirtualMachineOptions{} }
func (m *VirtualMachineOptions) String() string            { return proto.CompactTextString(m) }
func (*VirtualMachineOptions) ProtoMessage()               {}
func (*VirtualMachineOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VirtualMachineOptions) GetVirtualMachineSMBios() *SMBios {
	if m != nil {
		return m.VirtualMachineSMBios
	}
	return nil
}

func (m *VirtualMachineOptions) GetMemBalloonStatsPeriod() uint32 {
	if m != nil {
		return m.MemBalloonStatsPeriod
	}
	return 0
}

func (m *VirtualMachineOptions) GetPreallocatedVolumes() []string {
	if m != nil {
		return m.PreallocatedVolumes
	}
	return nil
}

func (m *VirtualMachineOptions) GetTopology() *Topology {
	if m != nil {
		return m.Topology
	}
	return nil
}

func (m *VirtualMachineOptions) GetDisksInfo() map[string]*DiskInfo {
	if m != nil {
		return m.DisksInfo
	}
	return nil
}

func (m *VirtualMachineOptions) GetExpandDisksEnabled() bool {
	if m != nil {
		return m.ExpandDisksEnabled
	}
	return false
}

func (m *VirtualMachineOptions) GetClusterConfig() *ClusterConfig {
	if m != nil {
		return m.ClusterConfig
	}
	return nil
}

type VMIRequest struct {
	Vmi     *VMI                   `protobuf:"bytes,1,opt,name=vmi" json:"vmi,omitempty"`
	Options *VirtualMachineOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (m *VMIRequest) Reset()                    { *m = VMIRequest{} }
func (m *VMIRequest) String() string            { return proto.CompactTextString(m) }
func (*VMIRequest) ProtoMessage()               {}
func (*VMIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VMIRequest) GetVmi() *VMI {
	if m != nil {
		return m.Vmi
	}
	return nil
}

func (m *VMIRequest) GetOptions() *VirtualMachineOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type MigrationRequest struct {
	Vmi     *VMI   `protobuf:"bytes,1,opt,name=vmi" json:"vmi,omitempty"`
	Options []byte `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *MigrationRequest) Reset()                    { *m = MigrationRequest{} }
func (m *MigrationRequest) String() string            { return proto.CompactTextString(m) }
func (*MigrationRequest) ProtoMessage()               {}
func (*MigrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MigrationRequest) GetVmi() *VMI {
	if m != nil {
		return m.Vmi
	}
	return nil
}

func (m *MigrationRequest) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

type ExecRequest struct {
	DomainName     string   `protobuf:"bytes,1,opt,name=domainName" json:"domainName,omitempty"`
	Command        string   `protobuf:"bytes,2,opt,name=Command" json:"Command,omitempty"`
	Args           []string `protobuf:"bytes,3,rep,name=Args" json:"Args,omitempty"`
	TimeoutSeconds int32    `protobuf:"varint,4,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExecRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ExecRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ExecRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ExecRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type Response struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DomainResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Domain   string    `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
}

func (m *DomainResponse) Reset()                    { *m = DomainResponse{} }
func (m *DomainResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainResponse) ProtoMessage()               {}
func (*DomainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DomainResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *DomainResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type DomainStatsResponse struct {
	Response    *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	DomainStats string    `protobuf:"bytes,2,opt,name=domainStats" json:"domainStats,omitempty"`
}

func (m *DomainStatsResponse) Reset()                    { *m = DomainStatsResponse{} }
func (m *DomainStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainStatsResponse) ProtoMessage()               {}
func (*DomainStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DomainStatsResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *DomainStatsResponse) GetDomainStats() string {
	if m != nil {
		return m.DomainStats
	}
	return ""
}

type GuestInfoResponse struct {
	Response          *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	GuestInfoResponse string    `protobuf:"bytes,2,opt,name=guestInfoResponse" json:"guestInfoResponse,omitempty"`
}

func (m *GuestInfoResponse) Reset()                    { *m = GuestInfoResponse{} }
func (m *GuestInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GuestInfoResponse) ProtoMessage()               {}
func (*GuestInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GuestInfoResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GuestInfoResponse) GetGuestInfoResponse() string {
	if m != nil {
		return m.GuestInfoResponse
	}
	return ""
}

type GuestUserListResponse struct {
	Response              *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	GuestUserListResponse string    `protobuf:"bytes,2,opt,name=guestUserListResponse" json:"guestUserListResponse,omitempty"`
}

func (m *GuestUserListResponse) Reset()                    { *m = GuestUserListResponse{} }
func (m *GuestUserListResponse) String() string            { return proto.CompactTextString(m) }
func (*GuestUserListResponse) ProtoMessage()               {}
func (*GuestUserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GuestUserListResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GuestUserListResponse) GetGuestUserListResponse() string {
	if m != nil {
		return m.GuestUserListResponse
	}
	return ""
}

type GuestFilesystemsResponse struct {
	Response                 *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	GuestFilesystemsResponse string    `protobuf:"bytes,2,opt,name=guestFilesystemsResponse" json:"guestFilesystemsResponse,omitempty"`
}

func (m *GuestFilesystemsResponse) Reset()                    { *m = GuestFilesystemsResponse{} }
func (m *GuestFilesystemsResponse) String() string            { return proto.CompactTextString(m) }
func (*GuestFilesystemsResponse) ProtoMessage()               {}
func (*GuestFilesystemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GuestFilesystemsResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GuestFilesystemsResponse) GetGuestFilesystemsResponse() string {
	if m != nil {
		return m.GuestFilesystemsResponse
	}
	return ""
}

type ExecResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	ExitCode int32     `protobuf:"varint,2,opt,name=exitCode" json:"exitCode,omitempty"`
	StdOut   string    `protobuf:"bytes,3,opt,name=stdOut" json:"stdOut,omitempty"`
}

func (m *ExecResponse) Reset()                    { *m = ExecResponse{} }
func (m *ExecResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()               {}
func (*ExecResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ExecResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ExecResponse) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ExecResponse) GetStdOut() string {
	if m != nil {
		return m.StdOut
	}
	return ""
}

type GuestPingRequest struct {
	DomainName     string `protobuf:"bytes,1,opt,name=domainName" json:"domainName,omitempty"`
	TimeoutSeconds int32  `protobuf:"varint,2,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
}

func (m *GuestPingRequest) Reset()                    { *m = GuestPingRequest{} }
func (m *GuestPingRequest) String() string            { return proto.CompactTextString(m) }
func (*GuestPingRequest) ProtoMessage()               {}
func (*GuestPingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GuestPingRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *GuestPingRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

type GuestPingResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *GuestPingResponse) Reset()                    { *m = GuestPingResponse{} }
func (m *GuestPingResponse) String() string            { return proto.CompactTextString(m) }
func (*GuestPingResponse) ProtoMessage()               {}
func (*GuestPingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GuestPingResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type FreezeRequest struct {
	Vmi                    *VMI  `protobuf:"bytes,1,opt,name=vmi" json:"vmi,omitempty"`
	UnfreezeTimeoutSeconds int32 `protobuf:"varint,2,opt,name=unfreezeTimeoutSeconds" json:"unfreezeTimeoutSeconds,omitempty"`
}

func (m *FreezeRequest) Reset()                    { *m = FreezeRequest{} }
func (m *FreezeRequest) String() string            { return proto.CompactTextString(m) }
func (*FreezeRequest) ProtoMessage()               {}
func (*FreezeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *FreezeRequest) GetVmi() *VMI {
	if m != nil {
		return m.Vmi
	}
	return nil
}

func (m *FreezeRequest) GetUnfreezeTimeoutSeconds() int32 {
	if m != nil {
		return m.UnfreezeTimeoutSeconds
	}
	return 0
}

type MemoryDumpRequest struct {
	Vmi      *VMI   `protobuf:"bytes,1,opt,name=vmi" json:"vmi,omitempty"`
	DumpPath string `protobuf:"bytes,2,opt,name=dumpPath" json:"dumpPath,omitempty"`
}

func (m *MemoryDumpRequest) Reset()                    { *m = MemoryDumpRequest{} }
func (m *MemoryDumpRequest) String() string            { return proto.CompactTextString(m) }
func (*MemoryDumpRequest) ProtoMessage()               {}
func (*MemoryDumpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MemoryDumpRequest) GetVmi() *VMI {
	if m != nil {
		return m.Vmi
	}
	return nil
}

func (m *MemoryDumpRequest) GetDumpPath() string {
	if m != nil {
		return m.DumpPath
	}
	return ""
}

type SEVInfoResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	SevInfo  []byte    `protobuf:"bytes,2,opt,name=sevInfo,proto3" json:"sevInfo,omitempty"`
}

func (m *SEVInfoResponse) Reset()                    { *m = SEVInfoResponse{} }
func (m *SEVInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*SEVInfoResponse) ProtoMessage()               {}
func (*SEVInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SEVInfoResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SEVInfoResponse) GetSevInfo() []byte {
	if m != nil {
		return m.SevInfo
	}
	return nil
}

type LaunchMeasurementResponse struct {
	Response          *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	LaunchMeasurement []byte    `protobuf:"bytes,2,opt,name=launchMeasurement,proto3" json:"launchMeasurement,omitempty"`
}

func (m *LaunchMeasurementResponse) Reset()                    { *m = LaunchMeasurementResponse{} }
func (m *LaunchMeasurementResponse) String() string            { return proto.CompactTextString(m) }
func (*LaunchMeasurementResponse) ProtoMessage()               {}
func (*LaunchMeasurementResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *LaunchMeasurementResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *LaunchMeasurementResponse) GetLaunchMeasurement() []byte {
	if m != nil {
		return m.LaunchMeasurement
	}
	return nil
}

type InjectLaunchSecretRequest struct {
	Vmi     *VMI   `protobuf:"bytes,1,opt,name=vmi" json:"vmi,omitempty"`
	Options []byte `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *InjectLaunchSecretRequest) Reset()                    { *m = InjectLaunchSecretRequest{} }
func (m *InjectLaunchSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*InjectLaunchSecretRequest) ProtoMessage()               {}
func (*InjectLaunchSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *InjectLaunchSecretRequest) GetVmi() *VMI {
	if m != nil {
		return m.Vmi
	}
	return nil
}

func (m *InjectLaunchSecretRequest) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

type DirtyRateResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Samples  uint64    `protobuf:"varint,2,opt,name=samples" json:"samples,omitempty"`
	Average  float32   `protobuf:"fixed32,3,opt,name=average" json:"average,omitempty"`
	Variance float32   `protobuf:"fixed32,4,opt,name=variance" json:"variance,omitempty"`
}

func (m *DirtyRateResponse) Reset()                    { *m = DirtyRateResponse{} }
func (m *DirtyRateResponse) String() string            { return proto.CompactTextString(m) }
func (*DirtyRateResponse) ProtoMessage()               {}
func (*DirtyRateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DirtyRateResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *DirtyRateResponse) GetSamples() uint64 {
	if m != nil {
		return m.Samples
	}
	return 0
}

func (m *DirtyRateResponse) GetAverage() float32 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *DirtyRateResponse) GetVariance() float32 {
	if m != nil {
		return m.Variance
	}
	return 0
}

type GuestStatsResponse struct {
	Response  *Response          `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	DirtyRate *DirtyRateResponse `protobuf:"bytes,2,opt,name=dirtyRate" json:"dirtyRate,omitempty"`
}

func (m *GuestStatsResponse) Reset()                    { *m = GuestStatsResponse{} }
func (m *GuestStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GuestStatsResponse) ProtoMessage()               {}
func (*GuestStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GuestStatsResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GuestStatsResponse) GetDirtyRate() *DirtyRateResponse {
	if m != nil {
		return m.DirtyRate
	}
	return nil
}

func init() {
	proto.RegisterType((*QemuVersionResponse)(nil), "kubevirt.cmd.v1.QemuVersionResponse")
	proto.RegisterType((*VMI)(nil), "kubevirt.cmd.v1.VMI")
	proto.RegisterType((*CPU)(nil), "kubevirt.cmd.v1.CPU")
	proto.RegisterType((*Sibling)(nil), "kubevirt.cmd.v1.Sibling")
	proto.RegisterType((*Pages)(nil), "kubevirt.cmd.v1.Pages")
	proto.RegisterType((*Memory)(nil), "kubevirt.cmd.v1.Memory")
	proto.RegisterType((*Cell)(nil), "kubevirt.cmd.v1.Cell")
	proto.RegisterType((*Topology)(nil), "kubevirt.cmd.v1.Topology")
	proto.RegisterType((*SMBios)(nil), "kubevirt.cmd.v1.SMBios")
	proto.RegisterType((*DiskInfo)(nil), "kubevirt.cmd.v1.DiskInfo")
	proto.RegisterType((*ClusterConfig)(nil), "kubevirt.cmd.v1.ClusterConfig")
	proto.RegisterType((*VirtualMachineOptions)(nil), "kubevirt.cmd.v1.VirtualMachineOptions")
	proto.RegisterType((*VMIRequest)(nil), "kubevirt.cmd.v1.VMIRequest")
	proto.RegisterType((*MigrationRequest)(nil), "kubevirt.cmd.v1.MigrationRequest")
	proto.RegisterType((*ExecRequest)(nil), "kubevirt.cmd.v1.ExecRequest")
	proto.RegisterType((*EmptyRequest)(nil), "kubevirt.cmd.v1.EmptyRequest")
	proto.RegisterType((*Response)(nil), "kubevirt.cmd.v1.Response")
	proto.RegisterType((*DomainResponse)(nil), "kubevirt.cmd.v1.DomainResponse")
	proto.RegisterType((*DomainStatsResponse)(nil), "kubevirt.cmd.v1.DomainStatsResponse")
	proto.RegisterType((*GuestInfoResponse)(nil), "kubevirt.cmd.v1.GuestInfoResponse")
	proto.RegisterType((*GuestUserListResponse)(nil), "kubevirt.cmd.v1.GuestUserListResponse")
	proto.RegisterType((*GuestFilesystemsResponse)(nil), "kubevirt.cmd.v1.GuestFilesystemsResponse")
	proto.RegisterType((*ExecResponse)(nil), "kubevirt.cmd.v1.ExecResponse")
	proto.RegisterType((*GuestPingRequest)(nil), "kubevirt.cmd.v1.GuestPingRequest")
	proto.RegisterType((*GuestPingResponse)(nil), "kubevirt.cmd.v1.GuestPingResponse")
	proto.RegisterType((*FreezeRequest)(nil), "kubevirt.cmd.v1.FreezeRequest")
	proto.RegisterType((*MemoryDumpRequest)(nil), "kubevirt.cmd.v1.MemoryDumpRequest")
	proto.RegisterType((*SEVInfoResponse)(nil), "kubevirt.cmd.v1.SEVInfoResponse")
	proto.RegisterType((*LaunchMeasurementResponse)(nil), "kubevirt.cmd.v1.LaunchMeasurementResponse")
	proto.RegisterType((*InjectLaunchSecretRequest)(nil), "kubevirt.cmd.v1.InjectLaunchSecretRequest")
	proto.RegisterType((*DirtyRateResponse)(nil), "kubevirt.cmd.v1.DirtyRateResponse")
	proto.RegisterType((*GuestStatsResponse)(nil), "kubevirt.cmd.v1.GuestStatsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cmd service

type CmdClient interface {
	SyncVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	PauseVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	UnpauseVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	FreezeVirtualMachine(ctx context.Context, in *FreezeRequest, opts ...grpc.CallOption) (*Response, error)
	UnfreezeVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	SoftRebootVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	ShutdownVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	KillVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	MigrateVirtualMachine(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*Response, error)
	SyncMigrationTarget(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	CancelVirtualMachineMigration(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	SignalTargetPodCleanup(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	FinalizeVirtualMachineMigration(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	HotplugHostDevices(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	GetDomain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	GetDomainStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainStatsResponse, error)
	GetGuestInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestInfoResponse, error)
	GetUsers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestUserListResponse, error)
	GetFilesystems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestFilesystemsResponse, error)
	Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Response, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	GuestPing(ctx context.Context, in *GuestPingRequest, opts ...grpc.CallOption) (*GuestPingResponse, error)
	VirtualMachineMemoryDump(ctx context.Context, in *MemoryDumpRequest, opts ...grpc.CallOption) (*Response, error)
	GetQemuVersion(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QemuVersionResponse, error)
	SyncVirtualMachineCPUs(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error)
	GetSEVInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SEVInfoResponse, error)
	GetLaunchMeasurement(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*LaunchMeasurementResponse, error)
	InjectLaunchSecret(ctx context.Context, in *InjectLaunchSecretRequest, opts ...grpc.CallOption) (*Response, error)
	GetGuestStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestStatsResponse, error)
}

type cmdClient struct {
	cc *grpc.ClientConn
}

func NewCmdClient(cc *grpc.ClientConn) CmdClient {
	return &cmdClient{cc}
}

func (c *cmdClient) SyncVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/SyncVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) PauseVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/PauseVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) UnpauseVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/UnpauseVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) FreezeVirtualMachine(ctx context.Context, in *FreezeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/FreezeVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) UnfreezeVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/UnfreezeVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) SoftRebootVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/SoftRebootVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) ShutdownVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/ShutdownVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) KillVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/KillVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) DeleteVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/DeleteVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) MigrateVirtualMachine(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/MigrateVirtualMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) SyncMigrationTarget(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/SyncMigrationTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) CancelVirtualMachineMigration(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/CancelVirtualMachineMigration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) SignalTargetPodCleanup(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/SignalTargetPodCleanup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) FinalizeVirtualMachineMigration(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/FinalizeVirtualMachineMigration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) HotplugHostDevices(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/HotplugHostDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetDomain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetDomainStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainStatsResponse, error) {
	out := new(DomainStatsResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetDomainStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetGuestInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestInfoResponse, error) {
	out := new(GuestInfoResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetGuestInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetUsers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestUserListResponse, error) {
	out := new(GuestUserListResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetFilesystems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestFilesystemsResponse, error) {
	out := new(GuestFilesystemsResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetFilesystems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GuestPing(ctx context.Context, in *GuestPingRequest, opts ...grpc.CallOption) (*GuestPingResponse, error) {
	out := new(GuestPingResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GuestPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) VirtualMachineMemoryDump(ctx context.Context, in *MemoryDumpRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/VirtualMachineMemoryDump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetQemuVersion(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QemuVersionResponse, error) {
	out := new(QemuVersionResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetQemuVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) SyncVirtualMachineCPUs(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/SyncVirtualMachineCPUs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetSEVInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SEVInfoResponse, error) {
	out := new(SEVInfoResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetSEVInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetLaunchMeasurement(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*LaunchMeasurementResponse, error) {
	out := new(LaunchMeasurementResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetLaunchMeasurement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) InjectLaunchSecret(ctx context.Context, in *InjectLaunchSecretRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/InjectLaunchSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdClient) GetGuestStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestStatsResponse, error) {
	out := new(GuestStatsResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.v1.Cmd/GetGuestStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cmd service

type CmdServer interface {
	SyncVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	PauseVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	UnpauseVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	FreezeVirtualMachine(context.Context, *FreezeRequest) (*Response, error)
	UnfreezeVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	SoftRebootVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	ShutdownVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	KillVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	DeleteVirtualMachine(context.Context, *VMIRequest) (*Response, error)
	MigrateVirtualMachine(context.Context, *MigrationRequest) (*Response, error)
	SyncMigrationTarget(context.Context, *VMIRequest) (*Response, error)
	CancelVirtualMachineMigration(context.Context, *VMIRequest) (*Response, error)
	SignalTargetPodCleanup(context.Context, *VMIRequest) (*Response, error)
	FinalizeVirtualMachineMigration(context.Context, *VMIRequest) (*Response, error)
	HotplugHostDevices(context.Context, *VMIRequest) (*Response, error)
	GetDomain(context.Context, *EmptyRequest) (*DomainResponse, error)
	GetDomainStats(context.Context, *EmptyRequest) (*DomainStatsResponse, error)
	GetGuestInfo(context.Context, *EmptyRequest) (*GuestInfoResponse, error)
	GetUsers(context.Context, *EmptyRequest) (*GuestUserListResponse, error)
	GetFilesystems(context.Context, *EmptyRequest) (*GuestFilesystemsResponse, error)
	Ping(context.Context, *EmptyRequest) (*Response, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	GuestPing(context.Context, *GuestPingRequest) (*GuestPingResponse, error)
	VirtualMachineMemoryDump(context.Context, *MemoryDumpRequest) (*Response, error)
	GetQemuVersion(context.Context, *EmptyRequest) (*QemuVersionResponse, error)
	SyncVirtualMachineCPUs(context.Context, *VMIRequest) (*Response, error)
	GetSEVInfo(context.Context, *EmptyRequest) (*SEVInfoResponse, error)
	GetLaunchMeasurement(context.Context, *VMIRequest) (*LaunchMeasurementResponse, error)
	InjectLaunchSecret(context.Context, *InjectLaunchSecretRequest) (*Response, error)
	GetGuestStats(context.Context, *EmptyRequest) (*GuestStatsResponse, error)
}

func RegisterCmdServer(s *grpc.Server, srv CmdServer) {
	s.RegisterService(&_Cmd_serviceDesc, srv)
}

func _Cmd_SyncVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).SyncVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/SyncVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).SyncVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_PauseVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).PauseVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/PauseVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).PauseVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_UnpauseVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).UnpauseVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/UnpauseVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).UnpauseVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_FreezeVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).FreezeVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/FreezeVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).FreezeVirtualMachine(ctx, req.(*FreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_UnfreezeVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).UnfreezeVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/UnfreezeVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).UnfreezeVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_SoftRebootVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).SoftRebootVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/SoftRebootVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).SoftRebootVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_ShutdownVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).ShutdownVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/ShutdownVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).ShutdownVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_KillVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).KillVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/KillVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).KillVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).DeleteVirtualMachine(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_MigrateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).MigrateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/MigrateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).MigrateVirtualMachine(ctx, req.(*MigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_SyncMigrationTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).SyncMigrationTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/SyncMigrationTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).SyncMigrationTarget(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_CancelVirtualMachineMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).CancelVirtualMachineMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/CancelVirtualMachineMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).CancelVirtualMachineMigration(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_SignalTargetPodCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).SignalTargetPodCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/SignalTargetPodCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).SignalTargetPodCleanup(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_FinalizeVirtualMachineMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).FinalizeVirtualMachineMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/FinalizeVirtualMachineMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).FinalizeVirtualMachineMigration(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_HotplugHostDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).HotplugHostDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/HotplugHostDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).HotplugHostDevices(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetDomain(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetDomainStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetDomainStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetDomainStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetDomainStats(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetGuestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetGuestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetGuestInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetGuestInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetUsers(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetFilesystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetFilesystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetFilesystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetFilesystems(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).Ping(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GuestPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GuestPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GuestPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GuestPing(ctx, req.(*GuestPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_VirtualMachineMemoryDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).VirtualMachineMemoryDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/VirtualMachineMemoryDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).VirtualMachineMemoryDump(ctx, req.(*MemoryDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetQemuVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetQemuVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetQemuVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetQemuVersion(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_SyncVirtualMachineCPUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).SyncVirtualMachineCPUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/SyncVirtualMachineCPUs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).SyncVirtualMachineCPUs(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetSEVInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetSEVInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetSEVInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetSEVInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetLaunchMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetLaunchMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetLaunchMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetLaunchMeasurement(ctx, req.(*VMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_InjectLaunchSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectLaunchSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).InjectLaunchSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/InjectLaunchSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).InjectLaunchSecret(ctx, req.(*InjectLaunchSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmd_GetGuestStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).GetGuestStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.v1.Cmd/GetGuestStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).GetGuestStats(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubevirt.cmd.v1.Cmd",
	HandlerType: (*CmdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncVirtualMachine",
			Handler:    _Cmd_SyncVirtualMachine_Handler,
		},
		{
			MethodName: "PauseVirtualMachine",
			Handler:    _Cmd_PauseVirtualMachine_Handler,
		},
		{
			MethodName: "UnpauseVirtualMachine",
			Handler:    _Cmd_UnpauseVirtualMachine_Handler,
		},
		{
			MethodName: "FreezeVirtualMachine",
			Handler:    _Cmd_FreezeVirtualMachine_Handler,
		},
		{
			MethodName: "UnfreezeVirtualMachine",
			Handler:    _Cmd_UnfreezeVirtualMachine_Handler,
		},
		{
			MethodName: "SoftRebootVirtualMachine",
			Handler:    _Cmd_SoftRebootVirtualMachine_Handler,
		},
		{
			MethodName: "ShutdownVirtualMachine",
			Handler:    _Cmd_ShutdownVirtualMachine_Handler,
		},
		{
			MethodName: "KillVirtualMachine",
			Handler:    _Cmd_KillVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _Cmd_DeleteVirtualMachine_Handler,
		},
		{
			MethodName: "MigrateVirtualMachine",
			Handler:    _Cmd_MigrateVirtualMachine_Handler,
		},
		{
			MethodName: "SyncMigrationTarget",
			Handler:    _Cmd_SyncMigrationTarget_Handler,
		},
		{
			MethodName: "CancelVirtualMachineMigration",
			Handler:    _Cmd_CancelVirtualMachineMigration_Handler,
		},
		{
			MethodName: "SignalTargetPodCleanup",
			Handler:    _Cmd_SignalTargetPodCleanup_Handler,
		},
		{
			MethodName: "FinalizeVirtualMachineMigration",
			Handler:    _Cmd_FinalizeVirtualMachineMigration_Handler,
		},
		{
			MethodName: "HotplugHostDevices",
			Handler:    _Cmd_HotplugHostDevices_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _Cmd_GetDomain_Handler,
		},
		{
			MethodName: "GetDomainStats",
			Handler:    _Cmd_GetDomainStats_Handler,
		},
		{
			MethodName: "GetGuestInfo",
			Handler:    _Cmd_GetGuestInfo_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Cmd_GetUsers_Handler,
		},
		{
			MethodName: "GetFilesystems",
			Handler:    _Cmd_GetFilesystems_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Cmd_Ping_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Cmd_Exec_Handler,
		},
		{
			MethodName: "GuestPing",
			Handler:    _Cmd_GuestPing_Handler,
		},
		{
			MethodName: "VirtualMachineMemoryDump",
			Handler:    _Cmd_VirtualMachineMemoryDump_Handler,
		},
		{
			MethodName: "GetQemuVersion",
			Handler:    _Cmd_GetQemuVersion_Handler,
		},
		{
			MethodName: "SyncVirtualMachineCPUs",
			Handler:    _Cmd_SyncVirtualMachineCPUs_Handler,
		},
		{
			MethodName: "GetSEVInfo",
			Handler:    _Cmd_GetSEVInfo_Handler,
		},
		{
			MethodName: "GetLaunchMeasurement",
			Handler:    _Cmd_GetLaunchMeasurement_Handler,
		},
		{
			MethodName: "InjectLaunchSecret",
			Handler:    _Cmd_InjectLaunchSecret_Handler,
		},
		{
			MethodName: "GetGuestStats",
			Handler:    _Cmd_GetGuestStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/handler-launcher-com/cmd/v1/cmd.proto",
}

func init() { proto.RegisterFile("pkg/handler-launcher-com/cmd/v1/cmd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xef, 0x6e, 0xdb, 0xc8,
	0x11, 0xb7, 0xfe, 0xd8, 0x91, 0xc7, 0x7f, 0x2e, 0x59, 0xff, 0x29, 0xe3, 0x36, 0x89, 0xcb, 0x16,
	0x81, 0xaf, 0xb8, 0xb3, 0x9b, 0x34, 0x77, 0x28, 0x82, 0xa2, 0x48, 0x2d, 0xc9, 0x3e, 0xdf, 0x9d,
	0x12, 0xdd, 0xca, 0x76, 0xd0, 0x6b, 0x0f, 0x87, 0x35, 0xb9, 0x96, 0xb7, 0x26, 0x77, 0x59, 0xee,
	0x52, 0x8d, 0xf2, 0xa9, 0x40, 0x8b, 0x7e, 0x28, 0xd0, 0x17, 0xe8, 0x0b, 0xf4, 0x19, 0xfa, 0x24,
	0x7d, 0x96, 0x7e, 0x3b, 0xec, 0x72, 0x29, 0x53, 0x22, 0x15, 0x27, 0x90, 0x3e, 0x99, 0xb3, 0x33,
	0xf3, 0xdb, 0xe1, 0xec, 0xcc, 0xec, 0x8f, 0x32, 0x7c, 0x1c, 0x5d, 0xf7, 0x0f, 0xae, 0x08, 0xf7,
	0x03, 0x1a, 0x7f, 0x1a, 0x90, 0x84, 0x7b, 0x57, 0x34, 0xfe, 0xd4, 0x13, 0xe1, 0x81, 0x17, 0xfa,
	0x07, 0x83, 0x27, 0xfa, 0xcf, 0x7e, 0x14, 0x0b, 0x25, 0xd0, 0x47, 0xd7, 0xc9, 0x05, 0x1d, 0xb0,
	0x58, 0xed, 0xeb, 0xb5, 0xc1, 0x13, 0xf7, 0x12, 0x36, 0xbe, 0xa1, 0x61, 0x72, 0x4e, 0x63, 0xc9,
	0x04, 0xc7, 0x54, 0x46, 0x82, 0x4b, 0x8a, 0x3e, 0x83, 0x46, 0x6c, 0x9f, 0x9d, 0xca, 0x6e, 0x65,
	0x6f, 0xe5, 0xe9, 0xfd, 0xfd, 0x09, 0xd7, 0xfd, 0xcc, 0x18, 0x8f, 0x4c, 0x91, 0x03, 0x77, 0x06,
	0x29, 0x92, 0x53, 0xdd, 0xad, 0xec, 0x2d, 0xe3, 0x4c, 0x74, 0x1f, 0x41, 0xed, 0xbc, 0x73, 0x62,
	0x0c, 0x42, 0xf6, 0xa5, 0x14, 0xdc, 0xc0, 0xae, 0xe2, 0x4c, 0x74, 0x9f, 0x40, 0xad, 0xd9, 0x3d,
	0x43, 0xeb, 0x50, 0x65, 0xbe, 0xd1, 0xad, 0xe1, 0x2a, 0xf3, 0xd1, 0x0e, 0x34, 0x24, 0xbb, 0x08,
	0x18, 0xef, 0x4b, 0xa7, 0xba, 0x5b, 0xdb, 0x5b, 0xc3, 0x23, 0xd9, 0x3d, 0x80, 0x3b, 0xbd, 0xf4,
	0xb9, 0xe0, 0xb6, 0x09, 0x8b, 0x03, 0x12, 0x24, 0xd4, 0x84, 0x51, 0xc7, 0xa9, 0xe0, 0xb6, 0x61,
	0xb1, 0x4b, 0xfa, 0x54, 0x6a, 0xb5, 0x27, 0x12, 0xae, 0x8c, 0x47, 0x1d, 0xa7, 0x02, 0x42, 0x50,
	0x4f, 0x38, 0x53, 0x36, 0x74, 0xf3, 0xac, 0xd7, 0x24, 0x7b, 0x4b, 0x9d, 0x9a, 0x81, 0x36, 0xcf,
	0xee, 0x33, 0x58, 0xea, 0xd0, 0x50, 0xc4, 0x43, 0xb4, 0x0d, 0x4b, 0x24, 0xcc, 0x01, 0x59, 0xa9,
	0x0c, 0xc9, 0xfd, 0x5f, 0x05, 0xea, 0x4d, 0x1a, 0x04, 0x85, 0x58, 0x0f, 0x60, 0x29, 0x34, 0x70,
	0xc6, 0x7c, 0xe5, 0xe9, 0x8f, 0x0a, 0x99, 0x4e, 0x77, 0xc3, 0xd6, 0x0c, 0x7d, 0x02, 0x8b, 0x91,
	0x7e, 0x0d, 0xa7, 0xb6, 0x5b, 0xdb, 0x5b, 0x79, 0xba, 0x5d, 0xb0, 0x37, 0x2f, 0x89, 0x53, 0x23,
	0xf4, 0x39, 0x2c, 0xfb, 0x4c, 0x2a, 0xc2, 0x3d, 0x2a, 0x9d, 0xba, 0xf1, 0x70, 0x0a, 0x1e, 0x36,
	0x8f, 0xf8, 0xc6, 0x14, 0xed, 0x41, 0xdd, 0x8b, 0x12, 0xe9, 0x2c, 0x1a, 0x97, 0xcd, 0x82, 0x4b,
	0xb3, 0x7b, 0x86, 0x8d, 0x85, 0xfb, 0x02, 0x1a, 0xa7, 0x22, 0x12, 0x81, 0xe8, 0x0f, 0xd1, 0x33,
	0x00, 0x9e, 0x84, 0xe4, 0x7b, 0x8f, 0x06, 0x81, 0x74, 0x2a, 0xc6, 0x77, 0xab, 0xe8, 0x4b, 0x83,
	0x00, 0x2f, 0x6b, 0x43, 0xfd, 0x24, 0xdd, 0x7f, 0x56, 0x60, 0xa9, 0xd7, 0x39, 0x64, 0x42, 0x22,
	0x17, 0x56, 0x43, 0xc2, 0x93, 0x4b, 0xe2, 0xa9, 0x24, 0xa6, 0xb1, 0xc9, 0xd3, 0x32, 0x1e, 0x5b,
	0xd3, 0x55, 0x14, 0xc5, 0xc2, 0x4f, 0xbc, 0x2c, 0xc3, 0x99, 0x98, 0x2f, 0xc0, 0xda, 0x58, 0x01,
	0xa2, 0xbb, 0x50, 0x93, 0xd7, 0x89, 0x53, 0x37, 0xab, 0xfa, 0x51, 0x1f, 0xde, 0x25, 0x09, 0x59,
	0x30, 0x74, 0x16, 0xcd, 0xa2, 0x95, 0xdc, 0x7f, 0x54, 0xa0, 0xd1, 0x62, 0xf2, 0xfa, 0x84, 0x5f,
	0x0a, 0x63, 0x24, 0xe2, 0x90, 0x28, 0x1b, 0x88, 0x95, 0xd0, 0x2e, 0xac, 0x5c, 0x10, 0xef, 0x9a,
	0xf1, 0xfe, 0x11, 0x0b, 0xa8, 0x0d, 0x23, 0xbf, 0x84, 0x1e, 0x02, 0xe8, 0x78, 0x49, 0xd0, 0xcb,
	0xea, 0xa7, 0x8e, 0x73, 0x2b, 0x1a, 0x41, 0xa7, 0x24, 0x33, 0xa8, 0x1b, 0x83, 0xfc, 0x92, 0xfb,
	0xdf, 0x0a, 0xac, 0x35, 0x83, 0x44, 0x2a, 0x1a, 0x37, 0x05, 0xbf, 0x64, 0x7d, 0xb4, 0x0f, 0xa8,
	0xfd, 0x26, 0x22, 0xdc, 0xd7, 0xf1, 0xc9, 0x36, 0x27, 0x17, 0x01, 0x4d, 0x4b, 0xa9, 0x81, 0x4b,
	0x34, 0xe8, 0x37, 0x70, 0xff, 0x28, 0xa6, 0x54, 0xd7, 0x03, 0xa6, 0x91, 0x88, 0x15, 0xe3, 0xfd,
	0x16, 0x93, 0xa9, 0x5b, 0xd5, 0xb8, 0x4d, 0x37, 0x40, 0xcf, 0xc1, 0x39, 0x14, 0xde, 0x95, 0x6c,
	0x31, 0x19, 0x05, 0x64, 0x78, 0x24, 0xe2, 0xf6, 0xd1, 0xc9, 0x71, 0x42, 0xa5, 0x92, 0xe6, 0x7d,
	0x1a, 0x78, 0xaa, 0xde, 0xfd, 0x4f, 0x1d, 0xb6, 0xce, 0xd3, 0x77, 0xe9, 0x10, 0xef, 0x8a, 0x71,
	0xfa, 0x2a, 0x52, 0x4c, 0x70, 0x89, 0xbe, 0x82, 0xcd, 0x71, 0x45, 0x7a, 0xf0, 0x76, 0xcc, 0x14,
	0x8b, 0x3f, 0x55, 0xe3, 0x52, 0x27, 0xf4, 0x0c, 0xb6, 0x3a, 0x34, 0x3c, 0x24, 0x41, 0x20, 0x04,
	0xef, 0x29, 0xa2, 0x64, 0x97, 0xc6, 0x4c, 0xa4, 0x2f, 0xb7, 0x86, 0xcb, 0x95, 0xe8, 0x97, 0xb0,
	0xd1, 0x8d, 0xa9, 0x5e, 0xf7, 0x88, 0xa2, 0xfe, 0xb9, 0x08, 0x92, 0xd0, 0xb6, 0xd3, 0x32, 0x2e,
	0x53, 0xe9, 0x79, 0xa8, 0x6c, 0x89, 0x9b, 0x93, 0x2a, 0x9b, 0x87, 0x59, 0x0f, 0xe0, 0x91, 0x29,
	0xea, 0xc1, 0xb2, 0x39, 0x0f, 0x5d, 0x4a, 0xb6, 0x91, 0x3e, 0x2b, 0xf8, 0x95, 0xa6, 0x69, 0x7f,
	0xe4, 0xd7, 0xe6, 0x2a, 0x1e, 0xe2, 0x1b, 0x9c, 0x29, 0x45, 0xb0, 0x34, 0xb5, 0x08, 0x5a, 0xb0,
	0xe6, 0xe5, 0xab, 0xc8, 0xb9, 0x63, 0x5e, 0xe0, 0x61, 0xb1, 0x2b, 0xf3, 0x56, 0x78, 0xdc, 0x69,
	0xe7, 0x35, 0xac, 0x8f, 0x87, 0xa4, 0x3b, 0xea, 0x9a, 0x0e, 0x6d, 0x5f, 0xe8, 0x47, 0x74, 0x90,
	0x9f, 0xba, 0x65, 0x29, 0xca, 0xda, 0xca, 0x0e, 0xe4, 0xe7, 0xd5, 0x5f, 0x57, 0xdc, 0x01, 0xc0,
	0x79, 0xe7, 0x04, 0xd3, 0x3f, 0xeb, 0xc2, 0x41, 0x8f, 0xa1, 0x36, 0x08, 0x99, 0x2d, 0x86, 0xe2,
	0xd0, 0xd1, 0x96, 0xda, 0x00, 0xbd, 0x80, 0x3b, 0x22, 0xcd, 0x94, 0xdd, 0xec, 0xf1, 0xfb, 0xe5,
	0x15, 0x67, 0x6e, 0xee, 0x29, 0xdc, 0xed, 0xb0, 0x7e, 0x4c, 0x94, 0xb9, 0xf7, 0x3e, 0x6c, 0x77,
	0x67, 0x7c, 0xf7, 0xd5, 0x1b, 0xd4, 0xbf, 0x55, 0x60, 0xa5, 0xfd, 0x86, 0x7a, 0x19, 0xe2, 0x43,
	0x00, 0x5f, 0x84, 0x84, 0xf1, 0x97, 0x24, 0xa4, 0x36, 0x57, 0xb9, 0x15, 0x8d, 0xd4, 0x14, 0x61,
	0x48, 0xb8, 0x9f, 0x8d, 0x32, 0x2b, 0xea, 0x3b, 0xe4, 0x77, 0x71, 0x3f, 0xab, 0x4a, 0xf3, 0x8c,
	0x1e, 0xc3, 0xba, 0x62, 0x21, 0x15, 0x89, 0xea, 0x51, 0x4f, 0x70, 0x5f, 0x9a, 0x62, 0x5c, 0xc4,
	0x13, 0xab, 0xee, 0x3a, 0xac, 0xb6, 0xc3, 0x48, 0x0d, 0x6d, 0x14, 0xee, 0x6f, 0xa1, 0x81, 0x73,
	0x77, 0xb4, 0x4c, 0x3c, 0x8f, 0x4a, 0x69, 0x07, 0x47, 0x26, 0x6a, 0x4d, 0x48, 0xa5, 0x24, 0xfd,
	0x6c, 0x9e, 0x65, 0xa2, 0xfb, 0x3d, 0xac, 0xb7, 0x4c, 0xcc, 0xb3, 0x12, 0x84, 0x6d, 0x58, 0x4a,
	0x5f, 0xde, 0xee, 0x60, 0x25, 0x97, 0xc3, 0x46, 0xba, 0x81, 0x69, 0xd3, 0x59, 0x77, 0xd9, 0x85,
	0x15, 0xff, 0x06, 0x2d, 0x1b, 0xce, 0xb9, 0x25, 0xf7, 0x0d, 0xdc, 0x33, 0x83, 0xca, 0x14, 0xe3,
	0x8c, 0xbb, 0x7d, 0x02, 0xf7, 0xfa, 0x93, 0x58, 0x76, 0xcf, 0xa2, 0xc2, 0xfd, 0x7b, 0x05, 0xb6,
	0xcc, 0xd6, 0x67, 0x92, 0xc6, 0x5f, 0x33, 0xa9, 0x66, 0xdd, 0xfe, 0x19, 0x6c, 0xf5, 0xcb, 0xf0,
	0x6c, 0x08, 0xe5, 0x4a, 0xf7, 0x5f, 0x15, 0x70, 0x4c, 0x18, 0xfa, 0xae, 0x92, 0x43, 0xa9, 0x68,
	0x38, 0x73, 0xda, 0x9f, 0x83, 0xd3, 0x9f, 0x02, 0x69, 0x83, 0x99, 0xaa, 0x77, 0x87, 0xb0, 0x9a,
	0xb6, 0xcd, 0x6c, 0x21, 0xec, 0x40, 0x83, 0xbe, 0x61, 0xaa, 0x29, 0xfc, 0x74, 0xcb, 0x45, 0x3c,
	0x92, 0x75, 0xed, 0x49, 0xe5, 0xbf, 0x4a, 0x94, 0xa5, 0x06, 0x56, 0x72, 0xbf, 0x85, 0xbb, 0x26,
	0x13, 0x5d, 0x4d, 0x80, 0xde, 0xb3, 0x6d, 0x8b, 0x8d, 0x58, 0x2d, 0x6d, 0xc4, 0x2f, 0x6d, 0x9d,
	0xa5, 0xd8, 0x33, 0xbd, 0x9b, 0x2b, 0x60, 0x4d, 0xdf, 0xd5, 0x6f, 0xe9, 0x87, 0x4e, 0xab, 0xcf,
	0x61, 0x3b, 0xe1, 0x97, 0xc6, 0xf5, 0xb4, 0x2c, 0xe8, 0x29, 0x5a, 0xf7, 0x35, 0xdc, 0x4b, 0x99,
	0x67, 0x2b, 0x09, 0xa3, 0x0f, 0xdd, 0x74, 0x07, 0x1a, 0x7e, 0x12, 0x46, 0x5d, 0xa2, 0xae, 0xec,
	0xe1, 0x8f, 0x64, 0xf7, 0x02, 0x3e, 0xea, 0xb5, 0xcf, 0xe7, 0xd1, 0x7b, 0x7a, 0x98, 0xd1, 0x81,
	0xb9, 0x5e, 0xed, 0x20, 0xb6, 0xa2, 0xfb, 0xd7, 0x0a, 0xdc, 0xff, 0xda, 0x7c, 0x0b, 0x75, 0x28,
	0x91, 0x49, 0x4c, 0x43, 0xca, 0xd5, 0x1c, 0x5a, 0x3d, 0x98, 0xc4, 0xb4, 0x1b, 0x17, 0x15, 0xee,
	0x77, 0x70, 0xff, 0x84, 0xff, 0x89, 0x7a, 0x2a, 0x8d, 0xa3, 0x47, 0xbd, 0x98, 0xaa, 0xf9, 0x5d,
	0x35, 0xff, 0xae, 0xc0, 0xbd, 0x16, 0x8b, 0xd5, 0x10, 0x13, 0x45, 0xe7, 0x91, 0x48, 0x12, 0x46,
	0x01, 0x95, 0xf6, 0x93, 0x29, 0x13, 0xb5, 0x86, 0x0c, 0x68, 0xac, 0x6f, 0x05, 0xdd, 0x37, 0x55,
	0x9c, 0x89, 0xfa, 0x88, 0x07, 0x24, 0x66, 0xfa, 0x73, 0xc1, 0xdc, 0x43, 0x55, 0x3c, 0x92, 0xf5,
	0x7c, 0x41, 0xa6, 0xf2, 0xe7, 0x32, 0xd0, 0x5f, 0xe8, 0x6f, 0x18, 0xfb, 0xa6, 0xf6, 0xbe, 0x77,
	0x4b, 0xc8, 0xc5, 0x44, 0x2e, 0xf0, 0x8d, 0xd3, 0xd3, 0xff, 0x6f, 0x40, 0xad, 0x19, 0xfa, 0xe8,
	0x25, 0xa0, 0xde, 0x90, 0x7b, 0xe3, 0xdc, 0x00, 0xfd, 0xb8, 0x34, 0xff, 0xe9, 0x49, 0xed, 0x4c,
	0x8f, 0xd0, 0x5d, 0x40, 0xaf, 0x60, 0xa3, 0x4b, 0x12, 0x49, 0xe7, 0x06, 0xf8, 0x0d, 0x6c, 0x9d,
	0xf1, 0x68, 0xae, 0x90, 0x3d, 0xd8, 0x4c, 0x07, 0xc7, 0x04, 0x62, 0x91, 0x01, 0x8e, 0xcd, 0x97,
	0x77, 0x83, 0x62, 0xd8, 0x3e, 0xb3, 0x63, 0x63, 0x6e, 0x81, 0x9e, 0x82, 0xd3, 0x13, 0x97, 0x0a,
	0xd3, 0x0b, 0x21, 0xd4, 0xdc, 0x50, 0x31, 0x6c, 0xf7, 0xae, 0x12, 0xe5, 0x8b, 0xbf, 0xf0, 0xb9,
	0x61, 0xbe, 0x04, 0xf4, 0x15, 0x0b, 0x82, 0xb9, 0xe1, 0x75, 0x61, 0xb3, 0x45, 0x03, 0xaa, 0xe6,
	0x97, 0xcb, 0xd7, 0xb0, 0x95, 0xd2, 0xdb, 0x49, 0xc8, 0x9f, 0x16, 0x7f, 0x5e, 0x98, 0xa0, 0xc1,
	0xb7, 0x56, 0xbc, 0xee, 0xa0, 0x91, 0xd3, 0x29, 0x89, 0xfb, 0x54, 0xcd, 0x10, 0xe9, 0xef, 0xe1,
	0x41, 0x53, 0xcf, 0x8c, 0x89, 0x6c, 0x8e, 0x36, 0x98, 0xf1, 0xe8, 0x59, 0x9f, 0x93, 0x20, 0x0d,
	0xb2, 0x2b, 0xfc, 0x66, 0x40, 0x09, 0x4f, 0xa2, 0x19, 0x30, 0xff, 0x00, 0x8f, 0x8e, 0x18, 0x27,
	0x01, 0x9b, 0x2c, 0xfc, 0x79, 0x04, 0xfc, 0x12, 0xd0, 0x17, 0x42, 0x45, 0x41, 0xd2, 0xff, 0x42,
	0x48, 0xd5, 0xa2, 0x03, 0xe6, 0x51, 0x39, 0x03, 0x5e, 0x07, 0x96, 0x8f, 0xa9, 0x4a, 0xa9, 0x35,
	0x7a, 0x50, 0xb0, 0xcc, 0x7f, 0x24, 0xec, 0x3c, 0x2a, 0x4e, 0xd4, 0x31, 0xce, 0x6f, 0x8a, 0x6a,
	0x7d, 0x04, 0x67, 0x06, 0xfb, 0x6d, 0x98, 0x3f, 0x9f, 0x82, 0x39, 0x76, 0x2b, 0x98, 0x11, 0xb5,
	0x7a, 0x4c, 0xd5, 0x88, 0x92, 0xdf, 0x06, 0x5b, 0x1c, 0xfe, 0x05, 0x36, 0x6f, 0x40, 0x1b, 0xc7,
	0xd4, 0x50, 0xdf, 0x5b, 0xe3, 0x7c, 0x5c, 0x0e, 0x58, 0xa0, 0xcd, 0x0b, 0xe8, 0x8f, 0x26, 0x05,
	0x39, 0x0a, 0x7b, 0x1b, 0xf4, 0xc7, 0xe5, 0xd0, 0x65, 0x24, 0x78, 0x01, 0x1d, 0x42, 0x5d, 0x53,
	0xc5, 0xdb, 0x30, 0xdf, 0x79, 0xe6, 0x6d, 0xa8, 0x6b, 0x2a, 0x8d, 0x7e, 0x52, 0xc4, 0xb8, 0xf9,
	0x30, 0xdd, 0x79, 0x30, 0x45, 0x9b, 0x1b, 0xc6, 0xcb, 0x23, 0xea, 0x5a, 0x32, 0x34, 0x26, 0x29,
	0xf3, 0xb4, 0x33, 0xc9, 0x33, 0x5f, 0xd3, 0x3d, 0xce, 0x44, 0xd7, 0x8c, 0x18, 0x26, 0x72, 0xa7,
	0xfc, 0xf0, 0x99, 0xa3, 0x9f, 0xb7, 0xcd, 0x3c, 0x7d, 0x36, 0xb9, 0xdf, 0xb3, 0x3f, 0xbc, 0x3c,
	0x4b, 0x7e, 0x0c, 0xb7, 0x73, 0xa4, 0xc0, 0x1a, 0x9a, 0xdd, 0x33, 0x39, 0x13, 0x73, 0x80, 0x63,
	0xaa, 0x2c, 0x0f, 0xbe, 0x2d, 0xd0, 0xdd, 0xe2, 0xcf, 0x62, 0xe3, 0x04, 0xda, 0x5d, 0x40, 0x04,
	0x36, 0x8f, 0xa9, 0x2a, 0x70, 0xde, 0x77, 0x87, 0xf8, 0x8b, 0x82, 0x72, 0x2a, 0x69, 0x76, 0x17,
	0xd0, 0x77, 0x80, 0x8a, 0x8c, 0x16, 0x15, 0x31, 0xa6, 0xd2, 0xde, 0x77, 0xa7, 0xe4, 0x0c, 0xd6,
	0xb2, 0x29, 0xf0, 0x5e, 0xd3, 0xe5, 0x67, 0xe5, 0x25, 0x37, 0x31, 0x5c, 0x0e, 0xeb, 0xdf, 0x56,
	0x07, 0x4f, 0x2e, 0x96, 0xcc, 0x7f, 0x40, 0x7e, 0xf5, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x65, 0x99, 0x12, 0x2e, 0x19, 0x00, 0x00,
}
